using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Movements : MonoBehaviour
{

    private Rigidbody2D rb;
    private Animator anim;

    [Header("Moving")]

    public float speed;

    public bool facingRight;

    private float moveInput;

    [Header("Jumping")]

    public float jumpForce;

    public float fallMultiplier;
    public float lowJumpMultiplier;

    //Quality of life
    public float jumpDelay;
    private float jumpTimer;

    //Detecting ground
    public bool isGrounded;

    public LayerMask groundLayer;
    public float groundLength;
    public Vector3 colliderOffset;

    [Header("Wall jump / slide")]

    //Wall slide

    bool isThouchingRight;
    public Transform rightCheck;
    bool wallSliding;
    public float wallSlidingSpeed;
    public float chekRadius;

    //Wall jump

    bool wallJumping;
    public float wallJumpTime;
    public float wallJumpForce;
    public float wallJumpSpeed;
    public bool canWallJump;
    public float timeUntilWallJump;

    [Header("Quality")]

    public ParticleSystem dust;

    public Transform camTarget;
    public float aheadAmount, aheadSpeed;

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        anim = GetComponent<Animator>();

        canWallJump = true;
    }

    void Update()
    {
        //Animation

        if(isGrounded == true) {

            anim.SetBool("isJumping", false);
            anim.SetBool("wallSliding", false);

            if (Input.GetKey(KeyCode.LeftArrow) || (Input.GetKey(KeyCode.RightArrow) || (Input.GetKey(KeyCode.A) || (Input.GetKey(KeyCode.D)))))
            {
                anim.SetBool("isMoving", true);

            } else {

                anim.SetBool("isMoving", false);
            }

        } else if(isGrounded == false && wallSliding == false) {

            anim.SetBool("isJumping", true);
            anim.SetBool("wallSliding", false);

        } else if (wallSliding == true && isGrounded == false) {

            anim.SetBool("wallSliding", true);
            anim.SetBool("isJumping", false);

        }

        //Jumping

        isGrounded = Physics2D.Raycast(transform.position + colliderOffset, Vector2.down, groundLength, groundLayer) || Physics2D.Raycast(transform.position - colliderOffset, Vector2.down, groundLength, groundLayer);

        if (Input.GetKeyDown(KeyCode.Z) || Input.GetKeyDown(KeyCode.Space))
        {
            jumpTimer = Time.time + jumpDelay;
        }

        if(Input.GetKeyUp(KeyCode.Z) || (Input.GetKeyUp(KeyCode.Space) && rb.velocity.y > 0))
        {
            rb.velocity = new Vector2(rb.velocity.x, rb.velocity.y * .5f);
        }

        //Better jumping
        if (rb.velocity.y < 0) {

            rb.velocity += Vector2.up * Physics2D.gravity.y * (fallMultiplier - 1) * Time.deltaTime;

        } else if (rb.velocity.y > 0 && !Input.GetKey(KeyCode.Z) || !Input.GetKey(KeyCode.Space)) {

            rb.velocity += Vector2.up * Physics2D.gravity.y * (lowJumpMultiplier - 1) * Time.deltaTime;

        }

        //Wall sliding

        isThouchingRight = Physics2D.OverlapCircle(rightCheck.position, chekRadius, groundLayer);

        if ((isThouchingRight == true) && isGrounded == false && moveInput != 0)
        {
            wallSliding = true;
        } else {
            wallSliding = false;
        }

        if(wallSliding)
        {
            rb.velocity = new Vector2(rb.velocity.x, Mathf.Clamp(rb.velocity.y, -wallSlidingSpeed, float.MaxValue));
        }

        //Wall jumping

        if(canWallJump == true)
        {
            if ((Input.GetKeyDown(KeyCode.Z) || Input.GetKeyDown(KeyCode.Space)) && (isThouchingRight) && !isGrounded && wallSliding == true)
            {
                wallJumping = true;
                Invoke("SetWallJumpingToFalse", wallJumpTime);
            }

            if (wallJumping == true)
            {
                rb.velocity = new Vector2(wallJumpSpeed * -moveInput, wallJumpForce);
                canWallJump = false;
                Invoke("AbleToWallJump", timeUntilWallJump);
            }
        }

        //Move camera point
        if (Input.GetAxisRaw("Horizontal") != 0)
        {
            camTarget.localPosition = new Vector3(Mathf.Lerp(camTarget.localPosition.x, aheadAmount * Input.GetAxisRaw("Horizontal"), aheadSpeed * Time.deltaTime), camTarget.localPosition.y, camTarget.localPosition.z);
        }
    }

    void FixedUpdate()
    {
        moveInput = Input.GetAxis("Horizontal");
        if((!isThouchingRight) || isGrounded)
        {
            rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);
        }

        if (jumpTimer > Time.time && isGrounded)
        {
            Jump();
        }

        if (moveInput != 0 && (moveInput > 0) != facingRight) Flip();
    }

    void Jump()
    {
        rb.velocity = Vector2.up * jumpForce;
    }

    void SetWallJumpingToFalse()
    {
        wallJumping = false;
    }

    void AbleToWallJump()
    {
        canWallJump = true;
    }

    void Flip()
    {
        facingRight = !facingRight;
        Vector3 Scaler = transform.localScale;
        Scaler.x *= -1;
        transform.localScale = Scaler;

        if (isGrounded == true)
        {
            CreateDust();
        }
    }

    void OnDrawGizmos()
    {

        Gizmos.color = Color.red;
        Gizmos.DrawLine(transform.position + colliderOffset, transform.position + colliderOffset + Vector3.down * groundLength);
        Gizmos.DrawLine(transform.position - colliderOffset, transform.position - colliderOffset + Vector3.down * groundLength);
    }

    //Particles
    void CreateDust()
    {
        dust.Play();
    }
}
